version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      frontend_stack:
        default: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
      backend_stack:
        default: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.frontend_stack>>
            aws cloudformation delete-stack --stack-name <<parameters.backend_stack>>

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-cache
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: frontend-build-cache
          paths: 
            - frontend/node_modules

  build-backend:
    docker:
      - image: cimg/python:3.10-alpine3.16
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-cache
      - run:
          name: Back-end build
          command: |
            apk add --update --no-cache ansible tar gzip nodejs npm curl aws-cli
            cd backend
            touch .env
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo NODE_ENV=production >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install --force
            npm run build
      - save_cache:
          key: backend-build-cache
          paths: 
            - backend/node_modules

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-cache
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-cache
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-cache
      - run:
          name: Front-end vulnerabilities analysis
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm update loader-utils --depth 2
            npm update minimist --depth 4
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-cache
      - run:
          name: Back-end vulnerabilities analysis
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm update
            npm update mkdirp --depth 2
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: "install tar and gzip"
          command: yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: "where am i ya m3allem ?!"
          command: |
            pwd
            ls -l
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            pwd
            ls -l
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["62:f5:e4:05:0d:29:41:5c:24:d4:67:47:bf:66:5f:80"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache ansible tar gzip aws-cli openssh
            # curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            # unzip awscli-bundle.zip
            # ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            ls -l
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-cache
      - run:
          name: Run migrations
          command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
              cat migrations_dump.txt
      - run:
          name: show logs when failing
          when: on_fail
          command: |
              cat /home/circleci/.npm/_logs/*-debug.log
      # - run:
      #     name: Send migration status to kvdb.io
      #     command: |   
      #         if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      #         then
      #             curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      #         fi
      #         curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment     

  deploy-frontend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
              apk add --update ansible tar gzip curl nodejs npm aws-cli
              # curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              # unzip awscli-bundle.zip
              # ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment 
                    
  deploy-backend:
    docker:
      - image: python:3.10-alpine3.16
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-cache
      - add_ssh_keys:
          fingerprints: ["62:f5:e4:05:0d:29:41:5c:24:d4:67:47:bf:66:5f:80"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
              apk add --update --no-cache ansible tar gzip nodejs npm curl aws-cli
              # sudo apt update
              # sudo apt install python3 python3-pip ansible tar gzip curl awscli -y

      - run:
          name: Deploy backend
          command: |
              cd backend
              touch .env
              echo ENVIRONMENT=production > ".env"
              echo TYPEORM_CONNECTION=postgres >> ".env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
              echo NODE_ENV=production >> ".env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
              npm i
              npm run build
              cd ..
              # Zip the directory
              tar -C backend -czf artifact.tar.gz .
              cd .circleci/ansible
              echo "Contents  of the inventory.txt file is -------"            
              cat inventory.txt
              ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: 
      #       - build-frontend
      # - test-backend:
      #     requires: 
      #       - build-backend
      # - scan-backend:
      #     requires: 
      #       - build-backend
      # - scan-frontend:
      #     requires: 
      #       - build-frontend
      - deploy-infrastructure
          # requires: 
          #   - test-frontend
          #   - test-backend
          #   - scan-frontend
          #   - scan-backend
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      # - deploy-frontend:
      #     requires:
      #       - configure-infrastructure
      - deploy-backend:
          requires:
            - configure-infrastructure
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]